package Lx;//我没看懂 回溯
/*
 * Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

Example:

Input: "aab"
Output:
[
  ["aa","b"],
  ["a","a","b"]
]

 */
import java.util.*;
public class solution131 {
	public static void main(String[] args) {
		List<List<String>> resultLst=partition("aabfffggh");
		for(int i=0;i<resultLst.size();i++)
		{
			for(int j=0;j<resultLst.get(i).size();j++)
			{
				System.out.print(resultLst.get(i).get(j)+" ");
			}
			System.out.println();
		}
	
		
}
	  static List<List<String>> resultLst;
	    static ArrayList<String> currLst;
	    public static List<List<String>> partition(String s) {
	        resultLst = new ArrayList<List<String>>();
	        currLst = new ArrayList<String>();
	        backTrack(s,0);//进行溯洄处理 一直对resultLst和currLst 
	        return resultLst;
	    }
	    public static void backTrack(String s, int l){
	        if(currLst.size()>0 //the initial str could be palindrome
	            && l>=s.length()){
	                List<String> r = (ArrayList<String>) currLst.clone();
	                resultLst.add(r);
	        }
	        for(int i=l;i<s.length();i++){//l 代表的是首字符位置
	            if(isPalindrome(s,l,i)){
	            	 System.out.println(i+" ");
	                if(l==i)
	                    currLst.add(Character.toString(s.charAt(i)));//所有单个的单词都是回文
	                else
	                    currLst.add(s.substring(l,i+1));//substring包前不包后
	                backTrack(s,i+1);//扩大回文字符串搜索长度
	                System.out.println(currLst+"$");
	                currLst.remove(currLst.size()-1);//很重要的一步 正在看
	                System.out.println(currLst+"#");
	            }
	        }
	    }
	    public static boolean isPalindrome(String str, int l, int r){
	        if(l==r) return true;//给定字符串如果两边掐齐后返回（这是最后一步）
	        while(l<r){//如果不是 每次比较两边 若不一样就false
	            if(str.charAt(l)!=str.charAt(r)) return false;
	            l++;r--;
	        }
	        return true;
	    }
}

